When would you want to use a remote repository rather than keeping all your work
local?

	When I want to share my work to others or simply make it publicly available
	to reference it from other documents or material.


Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

	Because I might be in the middle of some change and an automatic pull might
	interfere with this work in progress.


Describe the differences between forks, clones, and branches. When would you use
one instead of another?

	Fork is a GitHub specific functionality while clone and branch are
	operations provided by git. Fork and clone operates on repositories while
	branch operates on commits. Fork can only be called while connected to the
	GitHub servers, while clone and branch can be called offline.

	I would use fork if I want to contribute to a public project published at
	GitHub. I would use clone if I want to have an local copy of any git
	repository into my computer. I would use branch if I want to start a new
	development in any git repository, wheter this will add a new feature,
	improve and existing one or fix a bug.


What is the benefit of having a copy of the last known state of the remote
stored locally?

	I can compare my commits to those in the remote repository or test them
	whithout having a connection to the remote after the sync.


How would you collaborate without using Git or GitHub? What would be easier, and
what would be harder?

	I would create patches and share them by email. It would be harder to make
	sure that everyone involved in the project has exactly the same copy of the
	code. The easier part is that I won't need to learn a lot of commands and
	options, but I gues this will be less of a problem once I get enough
	practice.


When would you want to make changes in a separate branch rather than directly in
master? What benefits does each approach have?

	I would like to work in a separate branch when the changes I'm about to make
	will span a large amount of time or effort and I don't want to mess-up with
	the work that is being added to master from other contributors.

	Working in a separate branch allows me to try new features or improve the
	way some code is written or implemented while keeping a stable version in
	master. While this approach implies some overhead, is the best to
	collaborate.

	Working directly in master is more suitable when I'm working alone.
